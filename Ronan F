// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9;

contract SimpleStorage{
    uint256 favoriteNumber = 5;
    bool favoriteBool = true;
    string favoriteString = "Hello";
    int256 favoriteInteger = -5;
    address favoriteAddress = 0x5Eb4F4b6116D83d76E52C88f1e90bcae1007181d;
    bytes32 favoriteByte = "Cat";

}


// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9;

contract SimpleStorage{
    uint256 favoriteNumber = 0;

    function store(uint256 _favoriteNumber) public{
        favoriteNumber = _favoriteNumber;
    }
    function retrieve() public view returns(uint256){
        return favoriteNumber;
    }
}

// SPDX-License-Identifier:MIT
pragma solidity >= 0.7.0<0.9;
contract SimpleStorage{
    //This will get initialised to 0
    uint256 public favoriteNumber = 0;

    struct People{
        uint256 favoriteNumber;
        string name;
    }
    People public person = People({favoriteNumber: 2, name: "Prateek"});

    People[] public people; //dynamic array
    mapping(string => uint256) public nameToFavoriteNumber;

    function addPerson(string memory _name,uint256 _favoriteNumber) public {
        people.push(People({favoriteNumber: _favoriteNumber, name: _name}));
        nameToFavoriteNumber[_name] = _favoriteNumber;
    }

    function Store(uint256 _favoriteNumber) public {
        favoriteNumber = _favoriteNumber;

    }
    function retrieve() public view returns(uint256){
        return favoriteNumber + favoriteNumber;
    }

} 
